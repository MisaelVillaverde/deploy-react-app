{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js","recipe.module.css"],"names":["Recipe","props","key","className","style","recipe","title","toUpperCase","calories","image","src","alt","ingredients","map","ingredient","text","require","config","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","label","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","countapi","visits","result","id","module","exports"],"mappings":"kRAyBeA,EAtBA,SAACC,GACd,IAAIC,EAAM,EACV,OACE,yBAAKC,UAAWC,IAAMC,QACpB,4BAAKJ,EAAMK,MAAMC,eACjB,wCACY,8BAAON,EAAMO,WAEzB,yBACEL,UAAWC,IAAMK,MACjBC,IAAKT,EAAMQ,MACXE,IAAG,UAAKV,EAAMK,MAAX,UAEL,4BACGL,EAAMW,YAAYC,KAAI,SAACC,GAAD,OACrB,wBAAIZ,IAAG,WAAOA,IAAP,MAAmBY,EAAWC,YCd/CC,EAAQ,IAAUC,SAElB,IA0DeC,EA1DH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEYF,mBAAS,IAFrB,mBAETG,EAFS,KAEDC,EAFC,OAGUJ,mBAAS,QAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAKhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBACyBM,WADzB,oBACiEA,qCAF5E,cACXC,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAoBhB,OACE,yBAAK/B,UAAU,OACb,0BAAMA,UAAU,cAAckC,SARhB,SAACC,GACjBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,MAMN,2BACEpB,UAAU,aACVqC,KAAK,OACLC,YAAY,iBACZC,MAAOpB,EACPqB,SAnBa,SAACL,GAEpBf,EAAUe,EAAEM,OAAOF,UAmBf,4BAAQvC,UAAU,gBAAgBqC,KAAK,UAAvC,WAIF,yBAAKrC,UAAU,WACZiB,EAAQP,KAAI,SAACR,GAAD,OACX,kBAAC,EAAD,CACEH,IAAKG,EAAOA,OAAOwC,MACnBvC,MAAOD,EAAOA,OAAOwC,MACrBrC,SAAUH,EAAOA,OAAOG,SAASsC,QAAQ,GACzCrC,MAAOJ,EAAOA,OAAOI,MACrBG,YAAaP,EAAOA,OAAOO,oBC5CnBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,YCrH5BC,IAASC,SAASP,MAAK,SAACQ,GACtBjC,QAAQC,IAAIgC,EAAO1B,OACnBP,QAAQC,IAAIqB,UAAUY,Q,kBCrBxBC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB","file":"static/js/main.724606e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = (props) => {\r\n  let key = 0;\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{props.title.toUpperCase()}</h1>\r\n      <p>\r\n        Calories: <span>{props.calories}</span>\r\n      </p>\r\n      <img\r\n        className={style.image}\r\n        src={props.image}\r\n        alt={`${props.title} img`}\r\n      />\r\n      <ul>\r\n        {props.ingredients.map((ingredient) => (\r\n          <li key={`\\'${key++}\\'`}>{ingredient.text}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n// Components\r\nimport Recipe from './Recipe';\r\nrequire('dotenv').config();\r\n\r\nconst App = () => {\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [query, setQuery] = useState('cake');\r\n\r\n  useEffect(() => {\r\n    getRecipes();\r\n  }, [query]); // [search] To make request everytime search changes, if empty then only once\r\n\r\n  const getRecipes = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_APP_ID}&app_key=${process.env.REACT_APP_APP_KEY}`\r\n    );\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n    console.log(data.hits);\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    // console.log(e.target);\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch('');\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <form className='search-form' onSubmit={getSearch}>\r\n        <input\r\n          className='search-bar'\r\n          type='text'\r\n          placeholder='Search recipes'\r\n          value={search}\r\n          onChange={updateSearch}\r\n        />\r\n        <button className='search-button' type='submit'>\r\n          Search\r\n        </button>\r\n      </form>\r\n      <div className='recipes'>\r\n        {recipes.map((recipe) => (\r\n          <Recipe\r\n            key={recipe.recipe.label}\r\n            title={recipe.recipe.label}\r\n            calories={recipe.recipe.calories.toFixed(2)}\r\n            image={recipe.recipe.image}\r\n            ingredients={recipe.recipe.ingredients}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport countapi from 'countapi-js';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// Count Visits to the page\r\ncountapi.visits().then((result) => {\r\n  console.log(result.value);\r\n  console.log(navigator.id);\r\n});\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3uBDO\",\"image\":\"recipe_image__3C8wi\"};"],"sourceRoot":""}